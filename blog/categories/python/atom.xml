<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Technoskald]]></title>
  <link href="http://technoskald.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://technoskald.github.io/"/>
  <updated>2014-05-30T20:36:16-05:00</updated>
  <id>http://technoskald.github.io/</id>
  <author>
    <name><![CDATA[Kyle Maxwell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling URLs in Python with a wrapper function]]></title>
    <link href="http://technoskald.github.io/blog/2014/01/14/handling-urls-python-wrapper-function/"/>
    <updated>2014-01-14T22:24:46-06:00</updated>
    <id>http://technoskald.github.io/blog/2014/01/14/handling-urls-python-wrapper-function</id>
    <content type="html"><![CDATA[<p>Now for a break from Project Euler&hellip; In my projects, I find myself frequently retrieving URLs from various servers. Sometimes I need to call a REST API endpoint and other times I need to scrape a site. And like a lot of programmers, I don&rsquo;t like to rewrite code. So originally, in <a href="https://github.com/technoskald/maltrieve">Maltrieve</a>, I wrote a function called <code>get_URL()</code> that wrapped calls to <code>urllib2.urlopen()</code> so I didn&rsquo;t have to repeat the error handling every time. It <a href="https://github.com/technoskald/maltrieve/blob/b75dbe5d70aab97928648159d92ccdd2596b1d1c/malutil.py#L6">sucked</a>.</p>

<p>Now in a work project, I have the same basic requirement and I brought over that function. But in daily usage, the terribad error handling kept biting me. Also, sometimes I need to set up the request with various parameters (like, say, an API key or a specific user agent string).</p>

<p>For the latter requirement, <code>isinstance()</code> does the trick. We compare the parameter to the Python type <code>basestring</code> because all sorts of subclasses could get used; this mostly matters around Unicode stuff. Otherwise, we make sure the parameter is the proper type of object.</p>

<p>Once we make the request, though, we need to handle possible errors. We should probably replace the calls to <code>sys.stderr.write()</code> with <code>logging.error()</code> or similar, but for my implementations to date this works fine. In the <code>urllib2</code> module, <code>HTTPError</code> is a subclass of <code>URLError</code> is a subclass of <code>IOError</code>. So we need to handle the more specific cases first, else we will never see the data for them. And while we could access specific attributes like <code>HTTPError.code</code>, since all we want to do is tell a human, we just need the base value.</p>

<p>I suppose this could be rewritten as a class but that seems like one level of abstraction too far. And procedural programming can never go out of style.</p>

<p>``` python get_url()</p>

<h1>Utility function to get a URL with error handling</h1>

<h1>Accepts URL string or urllib2.Request object</h1>

<p>def get_url(orig_request):</p>

<pre><code>if isinstance(orig_request, basestring):
    url = orig_request.encode('utf8')
    request = urllib2.Request(url)
elif isinstance(orig_request, urllib2.Request):
    request = orig_request
else:
    return None

try:
    response = urllib2.urlopen(request)
except urllib2.HTTPError as e:
    sys.stderr.write("The server couldn't fulfill the request for URL %s: %s\n" % (request.get_full_url(), e))
    return None
except urllib2.URLError as e:
    sys.stderr.write("We failed to reach a server for URL %s: %s\n" % (request.get_full_url(), e))
    return None
else:
    return response
</code></pre>

<p>```</p>

<p>I need to backport this to Maltrieve soon, I think. So many projects&hellip; Although I have made this code snippet <a href="https://gist.github.com/technoskald/8430955">available as a Gist</a> for canonical purposes.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Technoskald]]></title>
  <link href="http://technoskald.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://technoskald.github.io/"/>
  <updated>2014-05-30T21:04:01-05:00</updated>
  <id>http://technoskald.github.io/</id>
  <author>
    <name><![CDATA[Kyle Maxwell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling URLs in Python with a wrapper function]]></title>
    <link href="http://technoskald.github.io/blog/2014/01/14/handling-urls-python-wrapper-function/"/>
    <updated>2014-01-14T22:24:46-06:00</updated>
    <id>http://technoskald.github.io/blog/2014/01/14/handling-urls-python-wrapper-function</id>
    <content type="html"><![CDATA[<p>Now for a break from Project Euler&hellip; In my projects, I find myself frequently retrieving URLs from various servers. Sometimes I need to call a REST API endpoint and other times I need to scrape a site. And like a lot of programmers, I don&rsquo;t like to rewrite code. So originally, in <a href="https://github.com/technoskald/maltrieve">Maltrieve</a>, I wrote a function called <code>get_URL()</code> that wrapped calls to <code>urllib2.urlopen()</code> so I didn&rsquo;t have to repeat the error handling every time. It <a href="https://github.com/technoskald/maltrieve/blob/b75dbe5d70aab97928648159d92ccdd2596b1d1c/malutil.py#L6">sucked</a>.</p>

<p>Now in a work project, I have the same basic requirement and I brought over that function. But in daily usage, the terribad error handling kept biting me. Also, sometimes I need to set up the request with various parameters (like, say, an API key or a specific user agent string).</p>

<p>For the latter requirement, <code>isinstance()</code> does the trick. We compare the parameter to the Python type <code>basestring</code> because all sorts of subclasses could get used; this mostly matters around Unicode stuff. Otherwise, we make sure the parameter is the proper type of object.</p>

<p>Once we make the request, though, we need to handle possible errors. We should probably replace the calls to <code>sys.stderr.write()</code> with <code>logging.error()</code> or similar, but for my implementations to date this works fine. In the <code>urllib2</code> module, <code>HTTPError</code> is a subclass of <code>URLError</code> is a subclass of <code>IOError</code>. So we need to handle the more specific cases first, else we will never see the data for them. And while we could access specific attributes like <code>HTTPError.code</code>, since all we want to do is tell a human, we just need the base value.</p>

<p>I suppose this could be rewritten as a class but that seems like one level of abstraction too far. And procedural programming can never go out of style.</p>

<p>``` python get_url()</p>

<h1>Utility function to get a URL with error handling</h1>

<h1>Accepts URL string or urllib2.Request object</h1>

<p>def get_url(orig_request):</p>

<pre><code>if isinstance(orig_request, basestring):
    url = orig_request.encode('utf8')
    request = urllib2.Request(url)
elif isinstance(orig_request, urllib2.Request):
    request = orig_request
else:
    return None

try:
    response = urllib2.urlopen(request)
except urllib2.HTTPError as e:
    sys.stderr.write("The server couldn't fulfill the request for URL %s: %s\n" % (request.get_full_url(), e))
    return None
except urllib2.URLError as e:
    sys.stderr.write("We failed to reach a server for URL %s: %s\n" % (request.get_full_url(), e))
    return None
else:
    return response
</code></pre>

<p>```</p>

<p>I need to backport this to Maltrieve soon, I think. So many projects&hellip; Although I have made this code snippet <a href="https://gist.github.com/technoskald/8430955">available as a Gist</a> for canonical purposes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 Tech goals]]></title>
    <link href="http://technoskald.github.io/blog/2013/12/29/2014-tech-goals/"/>
    <updated>2013-12-29T14:37:38-06:00</updated>
    <id>http://technoskald.github.io/blog/2013/12/29/2014-tech-goals</id>
    <content type="html"><![CDATA[<p>While the calendar will flip in a few days, I&rsquo;ve had some time off and and naturally have spent some time thinking about the future. What do I want to learn and improve in my technical skills over the next year or so? Most of the following can be summed up in two &ldquo;meta goals&rdquo;: <strong>write more code</strong> and <strong>get back to math and computer science.</strong></p>

<p>At the moment, I plan to work primarily in Python and C,  although that could change depending on projects and other similar factors. Today, I write most of my <a href="http://osrc.dfm.io/technoskald">open source code</a> in Python, and my closed source code for work leans even more heavily in that direction. C was my first love, though, and I still use a subset of it when working with Arduino. Other languages might crop up for specific projects, I suppose.</p>

<ol>
<li><strong>Submit a solid proposal to speak at DEFCON.</strong> I have no direct control over the acceptance of my proposal, but I can make sure that I work on something cool and submit a proposal that&rsquo;s worthy of serious consideration. Almost certainly this will deal with OSINT or network forensics.</li>
<li><strong>Complete the <a href="http://www.matasano.com/articles/crypto-challenges/">Matasano Crypto Challenges</a></strong> This will help me achieve a good hacker-level understanding of cryptography. Recent news events provide part of the motivation to learn a lot more about all this.</li>
<li><strong>Complete at least 100 problems from <a href="http://projecteuler.net">Project Euler</a>, including writeups.</strong> This project scratches a number of different itches for me, all in good ways.</li>
<li><strong>Build at least one really cool hardware project.</strong> I have a recent interest in hardware hacking, mostly around the so-called &ldquo;Internet of Things&rdquo;, and so (likely in conjunction with my daughter) I want to build something cool, albeit undetermined right now.</li>
</ol>


<p>For clarity&rsquo;s sake, of course I have other things I want to accomplish during the next few months to a year. Some of them almost fit here (more educational advocacy and volunteerism) and some don&rsquo;t (personal and family goals). But the above looks to me like a solid set of things to work on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computers versus telescopes]]></title>
    <link href="http://technoskald.github.io/blog/2013/12/24/computers-versus-telescopes/"/>
    <updated>2013-12-24T21:11:48-06:00</updated>
    <id>http://technoskald.github.io/blog/2013/12/24/computers-versus-telescopes</id>
    <content type="html"><![CDATA[<p><blockquote><p>Computer science is no more about computers than astronomy is about telescopes.</p><footer><strong>Michael R Fellows?</strong> <cite><a href="http://en.wikiquote.org/wiki/Computer%20science#Disputed">http://en.wikiquote.org/wiki/Computer%20science#Disputed</a></cite></footer></blockquote></p>

<p>Lots of folks have written in the past about the distinction between computer science and programming. A comment on Twitter reminded me of this again, but in an odd direction: the commenter expressed some dissatisfaction about having to learn some of the <em>history</em> of computer science while learning to program.</p>

<p>From a certain perspective, I can understand. Folks just dabbling in something like <a href="http://csedweek.org">The Hour of Code</a> might not have the interest or motivation right away to learn about Ada Lovelace and John von Neumann and Alan Turing. They likely have the motivation just to understand the whole idea of giving specific commands to a computer and thinking in advance of possible things that could happen &ndash; the mental framework that we coders take completely for granted.</p>

<p>But at the same time: learning the history of computer science matters the same way it does in any discipline. Hobbyists buying telescopes for family outings may not want to learn about, say, Galileo and Hubble and Newton (to play on the analogy in the opening quote). But once they start to take it seriously and graduate to a motivated amateur, they&rsquo;ll need to understand who those men were and why that matters.</p>

<p>The <a href="http://cs.saddleback.edu/michele/Teaching/CS1A/Slides/Topic%201%20-%20History%20-%202up.pdf">history of computer science</a> may not have the depth and twists that, say, physics does. But it has its own <a href="http://www.bbc.co.uk/news/technology-25495315">drama</a> worth understanding.</p>
]]></content>
  </entry>
  
</feed>

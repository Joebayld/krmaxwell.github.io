<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Technoskald]]></title>
  <link href="http://technoskald.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://technoskald.github.io/"/>
  <updated>2014-05-29T23:03:38-05:00</updated>
  <id>http://technoskald.github.io/</id>
  <author>
    <name><![CDATA[Kyle Maxwell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling URLs in Python with a wrapper function]]></title>
    <link href="http://technoskald.github.io/blog/2014/01/14/handling-urls-python-wrapper-function/"/>
    <updated>2014-01-14T22:24:46-06:00</updated>
    <id>http://technoskald.github.io/blog/2014/01/14/handling-urls-python-wrapper-function</id>
    <content type="html"><![CDATA[<p>Now for a break from Project Euler&hellip; In my projects, I find myself frequently retrieving URLs from various servers. Sometimes I need to call a REST API endpoint and other times I need to scrape a site. And like a lot of programmers, I don&rsquo;t like to rewrite code. So originally, in <a href="https://github.com/technoskald/maltrieve">Maltrieve</a>, I wrote a function called <code>get_URL()</code> that wrapped calls to <code>urllib2.urlopen()</code> so I didn&rsquo;t have to repeat the error handling every time. It <a href="https://github.com/technoskald/maltrieve/blob/b75dbe5d70aab97928648159d92ccdd2596b1d1c/malutil.py#L6">sucked</a>.</p>

<p>Now in a work project, I have the same basic requirement and I brought over that function. But in daily usage, the terribad error handling kept biting me. Also, sometimes I need to set up the request with various parameters (like, say, an API key or a specific user agent string).</p>

<p>For the latter requirement, <code>isinstance()</code> does the trick. We compare the parameter to the Python type <code>basestring</code> because all sorts of subclasses could get used; this mostly matters around Unicode stuff. Otherwise, we make sure the parameter is the proper type of object.</p>

<p>Once we make the request, though, we need to handle possible errors. We should probably replace the calls to <code>sys.stderr.write()</code> with <code>logging.error()</code> or similar, but for my implementations to date this works fine. In the <code>urllib2</code> module, <code>HTTPError</code> is a subclass of <code>URLError</code> is a subclass of <code>IOError</code>. So we need to handle the more specific cases first, else we will never see the data for them. And while we could access specific attributes like <code>HTTPError.code</code>, since all we want to do is tell a human, we just need the base value.</p>

<p>I suppose this could be rewritten as a class but that seems like one level of abstraction too far. And procedural programming can never go out of style.</p>

<p>``` python get_url()</p>

<h1>Utility function to get a URL with error handling</h1>

<h1>Accepts URL string or urllib2.Request object</h1>

<p>def get_url(orig_request):</p>

<pre><code>if isinstance(orig_request, basestring):
    url = orig_request.encode('utf8')
    request = urllib2.Request(url)
elif isinstance(orig_request, urllib2.Request):
    request = orig_request
else:
    return None

try:
    response = urllib2.urlopen(request)
except urllib2.HTTPError as e:
    sys.stderr.write("The server couldn't fulfill the request for URL %s: %s\n" % (request.get_full_url(), e))
    return None
except urllib2.URLError as e:
    sys.stderr.write("We failed to reach a server for URL %s: %s\n" % (request.get_full_url(), e))
    return None
else:
    return response
</code></pre>

<p>```</p>

<p>I need to backport this to Maltrieve soon, I think. So many projects&hellip; Although I have made this code snippet <a href="https://gist.github.com/technoskald/8430955">available as a Gist</a> for canonical purposes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Euler Problem 5]]></title>
    <link href="http://technoskald.github.io/blog/2014/01/10/project-euler-problem-5/"/>
    <updated>2014-01-10T18:50:39-06:00</updated>
    <id>http://technoskald.github.io/blog/2014/01/10/project-euler-problem-5</id>
    <content type="html"><![CDATA[<h2><a href="http://projecteuler.net/problem=5">Problem 5</a>: 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</h2>

<p>Around fourth or fifth grade (in the US, usually around 10 or 11 years old), we learned the concept of a <a href="http://en.wikipedia.org/wiki/Least_common_multiple"><strong>least common multiple</strong></a>. While the problem statement doesn&rsquo;t use that specific term, it actually contains a pretty decent definition of it: &ldquo;the smallest number that can be divided by each of the numbers [in a set] without any remainder&rdquo;. <code>LCM(1,2,3,4,5,6,7,8,9,10) == 2520</code> provides a helpful assertion to validate our code before running it on the real problem.</p>

<p>The easiest way for me to understand this problem is to apply the <strong>Fundamental Theorem of Arithmetic</strong> again and get the prime factorization of each number between 1 and the max in the set, exclusive. In other words, we calculate factors of 2 thru 9 for the example in the problem. Fortunately, we wrote code<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to do this before in <a href="http://technoskald.github.io/blog/2013/12/26/project-euler-problem-3/">Problem 3</a> (see <code>prime_factors()</code> there).</p>

<p>Then for our core logic, we define <code>n</code> as our maximum number and proceed as follows:</p>

<p>``` python Project Euler Problem 5
lcm = 1
factors = {}</p>

<p>for i in range(n-1, 1, -1):</p>

<pre><code>candidate_factors = prime_factors(i)
print "* Factors for %d are: %s" % (i, print_factors(candidate_factors))
for j in candidate_factors:
    if (not j in factors) or (candidate_factors[j] &gt; factors[j]):
        factors[j] = candidate_factors[j]
</code></pre>

<p>print &ldquo;Factors of LCM are %s&rdquo; % print_factors(factors)
for f in factors:</p>

<pre><code>lcm = lcm * f ** factors[f]
</code></pre>

<p>print &ldquo;LCM is %d&rdquo; % lcm
```</p>

<p>For each number in that range, we calculate the prime factorizationi (stored as a dictionary where each key-value pair is a factor consisting of a prime number and the power). Then we build the LCM from finding the highest power of each prime number in all the factorizations. Our test example (<code>n=10</code>) validated so then we re-run with <code>n=20</code>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Turns out that earlier code had some indentation problems in the blog post (not the actual source on my system, fortunately). All fixed now, sorry.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Euler: Problem 4]]></title>
    <link href="http://technoskald.github.io/blog/2014/01/09/project-euler-problem-4/"/>
    <updated>2014-01-09T20:37:47-06:00</updated>
    <id>http://technoskald.github.io/blog/2014/01/09/project-euler-problem-4</id>
    <content type="html"><![CDATA[<h2><a href="http://projecteuler.net/problem=4">Problem 4</a>: A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99. Find the largest palindrome made from the product of two 3-digit numbers.</h2>

<p>Palindromic numbers make much more sense to humans than computers because we can look at a number as a series of symbols rather than a scalar value. And of course they only make sense in the context of a given base; clearly we must assume base 10 here, validated by the example given.</p>

<p>First we write a little function to determine whether a given integer value is a palindrome. Python&rsquo;s <a href="http://stackoverflow.com/a/509295/1569808">slice notation</a> makes this easy:</p>

<p>``` python Function to determine whether a number is a palindrome
def is_palindrome(n):</p>

<pre><code>return (str(n) == str(n)[::-1])
</code></pre>

<p><code>``
Basically, appending [</code>[::-1]`](<a href="http://stackoverflow.com/questions/509211/pythons-slice-notation#comment323779_509295">http://stackoverflow.com/questions/509211/pythons-slice-notation#comment323779_509295</a>) gives us the reverse of a list.</p>

<p>With that in mind, we just need a couple of for-loops to iterate over all pairs of three-digit numbers:</p>

<p>``` python Project Euler Problem 4 the obvious way
result = 0
for i in range(100, 1000):</p>

<pre><code>for j in range(100, 1000):
    n = i*j
    if (is_palindrome(n)) and n &gt; result:
        lasti = i
        lastj = j
        result = n
</code></pre>

<p>print &ldquo;%d is the product of %d and %d&rdquo; % (result, lasti, lastj)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 Tech goals]]></title>
    <link href="http://technoskald.github.io/blog/2013/12/29/2014-tech-goals/"/>
    <updated>2013-12-29T14:37:38-06:00</updated>
    <id>http://technoskald.github.io/blog/2013/12/29/2014-tech-goals</id>
    <content type="html"><![CDATA[<p>While the calendar will flip in a few days, I&rsquo;ve had some time off and and naturally have spent some time thinking about the future. What do I want to learn and improve in my technical skills over the next year or so? Most of the following can be summed up in two &ldquo;meta goals&rdquo;: <strong>write more code</strong> and <strong>get back to math and computer science.</strong></p>

<p>At the moment, I plan to work primarily in Python and C,  although that could change depending on projects and other similar factors. Today, I write most of my <a href="http://osrc.dfm.io/technoskald">open source code</a> in Python, and my closed source code for work leans even more heavily in that direction. C was my first love, though, and I still use a subset of it when working with Arduino. Other languages might crop up for specific projects, I suppose.</p>

<ol>
<li><strong>Submit a solid proposal to speak at DEFCON.</strong> I have no direct control over the acceptance of my proposal, but I can make sure that I work on something cool and submit a proposal that&rsquo;s worthy of serious consideration. Almost certainly this will deal with OSINT or network forensics.</li>
<li><strong>Complete the <a href="http://www.matasano.com/articles/crypto-challenges/">Matasano Crypto Challenges</a></strong> This will help me achieve a good hacker-level understanding of cryptography. Recent news events provide part of the motivation to learn a lot more about all this.</li>
<li><strong>Complete at least 100 problems from <a href="http://projecteuler.net">Project Euler</a>, including writeups.</strong> This project scratches a number of different itches for me, all in good ways.</li>
<li><strong>Build at least one really cool hardware project.</strong> I have a recent interest in hardware hacking, mostly around the so-called &ldquo;Internet of Things&rdquo;, and so (likely in conjunction with my daughter) I want to build something cool, albeit undetermined right now.</li>
</ol>


<p>For clarity&rsquo;s sake, of course I have other things I want to accomplish during the next few months to a year. Some of them almost fit here (more educational advocacy and volunteerism) and some don&rsquo;t (personal and family goals). But the above looks to me like a solid set of things to work on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Euler: Problem 3]]></title>
    <link href="http://technoskald.github.io/blog/2013/12/26/project-euler-problem-3/"/>
    <updated>2013-12-26T20:00:31-06:00</updated>
    <id>http://technoskald.github.io/blog/2013/12/26/project-euler-problem-3</id>
    <content type="html"><![CDATA[<h2><a href="http://projecteuler.net/problem=3">Problem 3</a>: The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?</h2>

<p><a href="http://en.wikipedia.org/wiki/Integer_factorization">Factorization</a> is, computationally speaking, a Hard Problem. When mathematicians call a problem &ldquo;hard&rdquo;, we don&rsquo;t mean &ldquo;difficult for the human mind to comprehend&rdquo;, because that is subjective and subject to change. Remember, the differential calculus literally changed history when Newton and Leibniz first wrote about it, and now we teach it to kids in high school. No, what we mean in this case<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> is that it can&rsquo;t be solved in polynomial time &ndash; meaning that, for very large numbers, this takes infeasible amounts of time with everything we know about mathematics and computation right now. In fact, it&rsquo;s so hard that it forms the mathematical basis for public-key cryptography.</p>

<p>That doesn&rsquo;t mean we can&rsquo;t do it. It just means that for really, really big numbers, it takes a long time. So this problem isn&rsquo;t actually a large number, on the order of 10<sup>12</sup>. And lots of work has been done with this problem: in fact, it comes down to something called the &ldquo;Fundamental Theorem of Arithmetic&rdquo;, which is that every positive integer has a <em>unique</em> prime factorization.</p>

<p>To facilitate some problems later in Project Euler, I wrote a general-purpose factorization routine that does a little more than we need here.</p>

<p>``` python Integer factorization routine
def prime_factors(n):</p>

<pre><code>""" Return the prime factors of the given number. """
factors = {}
lastresult = n

# 1 is a special case
if n == 1:
    return {1: 1}

while lastresult != 1:
    c = 2
    while lastresult % c != 0:
        c += 1
    if c in factors:
        factors[c] += 1
    else:
        factors[c] = 1
    lastresult /= c

return factors
</code></pre>

<p>```</p>

<p>This will return a Python dict, where each key is a prime factor of the original number and the value of that key is the required power to which we need to raise that factor (e.g. <code>prime_factors(18)</code> returns <code>{2:1, 3:2}</code> for <tt>2<sup>1</sup> * 3<sup>2</sup></tt>).</p>

<p>Then we write a short script to call it with the appropriate number and print only the largest factor.</p>

<p><code>python Project Euler Problem 3 wrapper code
n = 600851475143
factors = prime_factors(n)
print "Largest prime factor of %d is %d" % (n, max(factors.keys()))
</code></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The &ldquo;hardness&rdquo; of a problem in mathematics is called its &ldquo;complexity&rdquo;. Computational complexity theory is a well-established and important field all on its own.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
